<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>CSharp_Parameter (C#参数工具)</title>
</head>
<body>
<h1>CSharp_Parameter (C#参数工具)</h1>
<p>用于批量增加或移除参数.</p>

<span title="参数类型来源于源参数列表的第几项?">Parameter type by index</span> <input id="txtTypeIndex" type="text" size="3" value="0" />
&nbsp; <input type="checkbox" id="chkParameterModifier" name="chkParameterModifier" value="1" />Parameter modifier:<input id="txtParameterModifier" type="text" size="3" value="out" />
&nbsp; <input type="button" title="Clear source(清空源文本框)" value="Clear source" onclick="clearSource();" />
&nbsp; <input type="button" title="Copy destination(复制目标文本框)" value="Copy destination" onclick="clipboardCopyDestination();" />
<br />
<input type="checkbox" id="chkApplyComment" name="chkApplyComment" value="1" checked />Apply to document comment
<span style="display:inline">
	&nbsp; <input type="checkbox" id="chkApplyCommentClass" name="chkApplyCommentClass" value="1" checked />Class filter:<input id="txtApplyCommentClass" type="text" size="20" value="I.*" />
</span>
&nbsp; <input type="checkbox" id="chkApplyCode" name="chkApplyCode" value="1" checked />Apply to body code
<br />
<p><input type="button" title="Add parameter(增加参数)" value="Add parameter" onclick="doAddParameter();" />
&nbsp; Parameter names: <input id="txtNames" type="text" size="24" value="args1, args2" />
&nbsp; <input type="button" title="Paste do - Add parameter(粘贴并执行)" value="Paste do" onclick="doAddParameterPaste();" />
</p>
<p>
<input type="button" title="Remove parameter(移除参数)" value="Remove parameter" onclick="doRemoveParameter();" style="display:none" />
&nbsp; Parameter index: <input id="txtParameterIndex" type="text" size="3" value="-1" />
&nbsp; (-1表示倒数第1项)
&nbsp; <input type="button" title="Paste do - Remove parameter(粘贴并执行)" value="Paste do" onclick="doRemoveParameterPaste();" style="display:none" />
</p>
<p><input type="button" title="Duplication genericity parameter(复制泛型参数)" value="Duplication genericity parameter" onclick="doDuplicationGenericityParameter();" />
&nbsp; Sample type:<input id="txtSampleType" type="text" size="15" value="Vector&lt;int&gt;" />
&nbsp; <input type="button" title="Paste do - Remove parameter(粘贴并执行)" value="Paste do" onclick="doDuplicationGenericityParameterPaste();" />
<br />
&nbsp; Sub types:<input id="txtSubTypes" type="text" size="60" value="float,double,sbyte,byte,short,ushort,int,uint,long,ulong,ExInt128,ExUInt128" />
&nbsp; <input type="button" title="Reset - Sub types(重置子类型)" value="Reset" onclick="doSubTypesReset();" />
</p>
<div>
	<div style="display:inline-block; width:45%">
		Source:<br>
		<textarea id="txtS" rows="30" style="width: 100%"></textarea>
	</div>
	&nbsp; &nbsp; 
	<div style="display:inline-block; width:45%">
		Destination:<br>
		<textarea id="txtD" rows="30" style="width: 100%"></textarea>
	</div>
</div>

<script type="text/javascript">
const clipboardObj = navigator.clipboard;
var m_TypeIndex = 0;
var m_ParameterModifier = "";
var m_ParameterIndex = -1;
var m_ApplyComment = false;
var m_ApplyCommentClass = "";
var m_ApplyCode = false;

/** @class BracketInfo
 * Bracket info (括号信息).
 */
function BracketInfo(config) {
	config = config || {};
	this.start = config.start || 0;
	this.len = config.len || 0;
	this.parameterCount = config.parameterCount || 0;
	this.parameterBorders = config.parameterBorders || []; // `)` or `,`
	this.parameterStarts = config.parameterStarts || [];
	this.parameterLens = config.parameterLens || [];
	this.parameterTexts = config.parameterTexts || [];
}

/** Load config
 */
function loadConfig() {
	try {
		const chkParameterModifier = document.getElementById('chkParameterModifier');
		const chkApplyComment = document.getElementById('chkApplyComment');
		const chkApplyCode = document.getElementById('chkApplyCode');
		m_TypeIndex = parseInt(document.getElementById('txtTypeIndex').value)||0;
		m_ParameterModifier = "";
		if (chkParameterModifier.checked) m_ParameterModifier=document.getElementById('txtParameterModifier').value.trim() || "";
		m_ParameterIndex = parseInt(document.getElementById('txtParameterIndex').value)||0;
		m_ApplyComment = chkApplyComment.checked;
		m_ApplyCommentClass = "";
		if (m_ApplyComment) m_ApplyCommentClass = document.getElementById('txtApplyCommentClass').value.trim();
		m_ApplyCode = chkApplyCode.checked;
	} catch(ex) {
		console.log("Run loadConfig fail!", ex);
	}
}

/** Clear source textbox.
 */
function clearSource() {
	const txtS = document.getElementById('txtS');
	txtS.value = "";
}

/** Clipboard - Copy destination textbox.
 */
function clipboardCopyDestination() {
	const txtD = document.getElementById('txtD');
	// copy.
	if (!clipboardObj) {
		txtS.select();
		document.execCommand('copy');
		// do.
		if (!!callback) callback();
	} else {
		var text = txtD.value;
		clipboardObj.writeText(text).then(function(res){
		  console.log(res);
		}, function(ex){
		  console.log("Call writeText fail!", ex);
		});
	}
}

/** Clipboard - Paste and run.
 *
 * @param {Function}	callback	On check callback. Prototype: `function()` .
 */
function pasteAndRun(callback) {
	const txtS = document.getElementById('txtS');
	//const txtD = document.getElementById('txtD');
	// paste.
	if (!clipboardObj) {
		txtS.value = "";
		txtS.select();
		document.execCommand('paste');
		// do.
		if (!!callback) callback();
	} else {
		clipboardObj.readText().then(function(text){
		  //console.log(text);
		  txtS.value = text;
			// do.
			if (!!callback) callback();
		}, function(ex){
		  console.log("Call readText fail!", ex);
		});
	}
}

/** Find main bracket.
 *
 * @param {String}	src	Source text.
 * @param {Number}	startIndex	(optional) The start index of source.
 * @param {Number}	len	(optional) The length of source.
 * @return {BracketInfo}	Return bracket info. Return null if not found.
 */
function findBracket(src, startIndex, len) {
	var list = findAllTopBracket(src, startIndex, len);
	if (null==list || (list.length<=0)) return null;
	return list[list.length-1];
}

/** Find all top bracket.
 *
 * @param {String}	src	Source text.
 * @param {Number}	startIndex	(optional) The start index of source.
 * @param {Number}	len	(optional) The length of source.
 * @return {BracketInfo[]}	Return bracket info.
 */
function findAllTopBracket(src, startIndex, len) {
	var rt = [];
	startIndex = startIndex || 0;
	if (src.length<startIndex) return rt;
	if (typeof(len)!="number") len = -1;
	var endIndex = src.length;
	if (len<0) {
		// endIndex = src.length;
	} else if (len<1) {
		return rt;
	} else {
		endIndex = startIndex + len;
		if (endIndex>src.length) endIndex=src.length;
	}
	var expressionBlank = /\s+/g;
	var curBracket = null;
	var bracketDeep = 0;
	var parameterUsed = false;
	var parameterCurUsed = false;
	var parameterCurStart = 0;
	var parameterCurEnd = 0;
	var i;
	for(i=startIndex; i<endIndex; ++i) {
		var ch = src.charAt(i);
		if ("("==ch) {
			++bracketDeep;
			if (1==bracketDeep) {
				curBracket = new BracketInfo();
				curBracket.start = i;
				parameterUsed = false;
				parameterCurUsed = false;
				parameterCurStart = i+1;
				parameterCurEnd = parameterCurStart;
			}
		} else if (")"==ch) {
			--bracketDeep;
			if (0==bracketDeep && (null!=curBracket)) {
				curBracket.len = i - curBracket.start + 1;
				if (parameterUsed) {
					var parameterLen = parameterCurEnd - parameterCurStart;
					curBracket.parameterBorders.push(i);
					curBracket.parameterStarts.push(parameterCurStart);
					curBracket.parameterLens.push(parameterLen);
					curBracket.parameterTexts.push(src.substring(parameterCurStart, parameterCurEnd));
					curBracket.parameterCount++;
				}
				rt.push(curBracket);
				curBracket = null;
			}
		} else if (","==ch) {
			if (bracketDeep>0) {
				parameterUsed = true;
				var parameterLen = parameterCurEnd - parameterCurStart;
				curBracket.parameterBorders.push(i);
				curBracket.parameterStarts.push(parameterCurStart);
				curBracket.parameterLens.push(parameterLen);
				curBracket.parameterTexts.push(src.substring(parameterCurStart, parameterCurEnd));
				curBracket.parameterCount++;
				// Next parameter.
				parameterCurUsed = false;
				parameterCurStart = i+1;
				parameterCurEnd = parameterCurStart;
			}
		} else if (expressionBlank.test(ch)) {
			// Blank char.
			if (bracketDeep>0) {
				if (parameterCurUsed) {
				} else {
				}
			}
		} else {
			// NonBlank char.
			if (bracketDeep>0) {
				parameterUsed = true;
				if(!parameterCurUsed) {
					parameterCurUsed = true;
					parameterCurStart = i;
				}
				parameterCurEnd = i+1;
			}
		}
	}
	return rt;
}

function doAddParameterPaste() {
	pasteAndRun(doAddParameter);
}

/** do AddParameter.
 */
function doAddParameter() {
	const txtS = document.getElementById('txtS');
	const txtD = document.getElementById('txtD');
	var i;
	try {
		loadConfig();
		var parameterNames = document.getElementById('txtNames').value.trim() || "";
		if (parameterNames.length<=0) {
			throw new Error('`Parameter names` can not be empty!');
		}
		var nameList = [parameterNames];
		if (parameterNames.indexOf(",")>=0) {
			nameList = parameterNames.split(",");
			for(i=0; i<nameList.length; ++i) {
				nameList[i] = ("" + nameList[i]).trim();
			}
		}
		// do.
		var lines = txtS.value.split("\n");
		var lines2 = doAddParameter_Core(lines, nameList);
		var dst = lines2.join("\n");
		txtD.value = dst;
	} catch(ex) {
		console.log("Run AddParameter fail!", ex);
		txtD.value = ex;
	}
}

/** Do AddParameter - Core.
 *
 * @param {String[]}	lines	Source lines.
 * @param {String[]}	nameList	Parameter name list.
 * @return {String[]}	Return destination lines.
 */
function doAddParameter_Core(lines, nameList) {
	var rt = [];
	var nameListCount = nameList.length;
	if (nameListCount<=0) {
		throw new Error("The `nameList.length`("+nameListCount+") must >0 !");
	}
	var regExpApplyCommentClass = null;
	if (m_ApplyCommentClass.length>0) {
		regExpApplyCommentClass = new RegExp(m_ApplyCommentClass);
	}
	var n;
	var i, j;
	for(i=0; i<lines.length; ++i) {
		var line = lines[i];
		var dst = line;
		if (typeof(line)=="string" && (line.length>0)) {
			var src = line;
			var srcTrim;
			var srcStart = 0;
			var srcLength = line.length;
			var isComment = false;
			var indexComment = line.indexOf("///");
			if (indexComment>=0) {
				isComment = true;
				srcStart = indexComment + 3;
			} else {
			}
			n = line.indexOf("//", srcStart);
			if (n>=0) {
				srcLength = n - srcStart;
				src = line.substr(0, n);
			}
			var temp = line.substr(srcStart, srcLength).trim();
			var needDo = (srcLength>0) && (!temp.startsWith("["));
			if (needDo) {
				if (!m_ApplyComment) needDo=false;
			}
			if (needDo && isComment) {
				// check cref.
				n = line.indexOf(" cref", srcStart);
				if (n>0 && n<(srcStart+srcLength)) {
					srcStart = n + 4;
					// First `"`
					n = line.indexOf("\"", srcStart);
					if (n>0 && n<(srcStart+srcLength)) {
						srcStart = n + 1;
						// Second `"`
						n = line.indexOf("\"", srcStart);
						if (n>0 && n<(srcStart+srcLength)) {
							srcLength = n - srcStart;
							temp = line.substr(srcStart, srcLength);
							console.log("Line["+i+"] cref: ", temp);
							// The method full name.
							n = line.indexOf("(", srcStart);
							if (n>0 && n<(srcStart+srcLength)) {
								temp = line.substr(srcStart, n - srcStart);
								n = temp.indexOf(".");
								if (n>=0) {
									var nameClass = temp.substring(0, n).trim();
									if (null!=regExpApplyCommentClass) {
										needDo = regExpApplyCommentClass.test(nameClass);
									}
								} else {
									// No class name. Allow do.
								}
							} else {
								needDo = false;
							}
						} else {
							needDo = false;
						}
					} else {
						needDo = false;
					}
				} else {
					needDo = false;
				}
			}
			if (needDo) {
				var bracketInfo = findBracket(line, srcStart, srcLength);
				console.log("Line["+i+"]: ", bracketInfo);
				var curParameterIndex = m_ParameterIndex;
				if (null!=bracketInfo && bracketInfo.parameterCount>m_TypeIndex && bracketInfo.parameterCount>=curParameterIndex) {
					if (curParameterIndex<0) curParameterIndex=bracketInfo.parameterCount;
					var parameterTextSrc = bracketInfo.parameterTexts[m_TypeIndex];
					var parameterType = "";
					var isCodeBody = false;
					if (!isComment) {
						n = parameterTextSrc.lastIndexOf(" ");
						if (n>=0) {
							parameterType = parameterTextSrc.substring(0, n);
						} else {
							isCodeBody = true;
							needDo = m_ApplyCode;
						}
					}
					if (needDo) {
						var insertText = "";
						for(j=0; j<nameList.length; ++j) {
							var parameterTextDst = parameterTextSrc;
							if (parameterType.length>0) {
								parameterTextDst = parameterType + " " + nameList[j];
							} else if (isCodeBody) {
								parameterTextDst = nameList[j];
							}
							if (m_ParameterModifier.length>0) {
								parameterTextDst = m_ParameterModifier + " " + parameterTextDst;
							}
							insertText += ", " + parameterTextDst;
						}
						if (curParameterIndex>0) {
							n = bracketInfo.parameterBorders[curParameterIndex-1];
						} else {
							n = bracketInfo.start + 1;
							insertText = insertText.substring(2) + ", ";
						}
						dst = line.substring(0, n) + insertText + line.substring(n);
					}
				}
			}
		}
		// done.
		rt.push(dst);
	}
	return rt;
}

function doRemoveParameterPaste() {
	pasteAndRun(doRemoveParameter);
}

/** Do RemoveParameter.
 */
function doRemoveParameter() {
	throw new Error("RemoveParameter is under construction.");
}

function doDuplicationGenericityParameterPaste() {
	pasteAndRun(doDuplicationGenericityParameter);
}

/** Do duplication genericity parameter(复制泛型参数).
 */
function doDuplicationGenericityParameter() {
	const txtS = document.getElementById('txtS');
	const txtD = document.getElementById('txtD');
	var i;
	try {
		loadConfig();
		var sampleType = document.getElementById('txtSampleType').value.trim() || "";
		var subTypes = document.getElementById('txtSubTypes').value.trim() || "";
		if (subTypes.length<=0) {
			throw new Error('`Sub types` can not be empty!');
		}
		var subTypeList = [subTypes];
		if (subTypes.indexOf(",")>=0) {
			subTypeList = subTypes.split(",");
			for(i=0; i<subTypeList.length; ++i) {
				subTypeList[i] = ("" + subTypeList[i]).trim();
			}
		}
		// do.
		var lines = txtS.value.split("\n");
		var lines2 = doDuplicationGenericityParameter_Core(lines, sampleType, subTypeList);
		var dst = lines2.join("\n");
		txtD.value = dst;
	} catch(ex) {
		console.log("Run AddParameter fail!", ex);
		txtD.value = ex;
	}
}

/** Do duplication genericity parameter - Core.
 *
 * @param {String[]}	lines	Source lines.
 * @param {String}	sampleType	Genericity sample type.
 * @param {String[]}	subTypeList	Genericity sub type list.
 * @return {String[]}	Return destination lines.
 */
function doDuplicationGenericityParameter_Core(lines, sampleType, subTypeList) {
	var rt = [];
	var i,j;
	if ((typeof(sampleType)!="string") || (sampleType.length<=0)) {
		throw new Error("The `sampleType` can not be empty!");
	}
	var subTypeListCount = subTypeList.length;
	if (subTypeListCount<=0) {
		throw new Error("The `subTypeList.length`("+subTypeListCount+") must >0 !");
	}
	// split sampleType.
	var sampleTypeSplits = splitGenericityType(sampleType, subTypeList);
	console.log("sampleTypeSplits: ", sampleTypeSplits);
	// body.
	var sampleTypeComment = toCommentType(sampleType);
	for(i=0; i<subTypeListCount; ++i) {
		var dstType = sampleTypeSplits.join(subTypeList[i]);
		var dstTypeComment = toCommentType(dstType);
		var cnt = 0;
		for(j=0; j<lines.length; ++j) {
			var line = lines[j];
			var n = line.indexOf(sampleType);
			if (n>=0) {
				var arrTemp = line.split(sampleType);
				line = arrTemp.join(dstType);
				++cnt;
			}
			if (m_ApplyComment) {
				n = line.indexOf(sampleTypeComment);
				if (n>=0) {
					var arrTemp = line.split(sampleTypeComment);
					line = arrTemp.join(dstTypeComment);
				}
			}
			// done.
			rt.push(line);
		}
		if (cnt<=0) {
			throw new Error("Not found sampleType(`"+sampleType+"`)!");
		}
	}
	return rt;
}

/** To comment type text.
 *
 * @param {String}	src	The source.
 * @return {String[]}	Return result.
 */
function toCommentType(src) {
	var rt = src.replace("<", "{")
			.replace(">", "}");
	return rt;
}

/** Split genericity type.
 *
 * @param {String}	sampleType	Genericity sample type.
 * @param {String[]}	subTypeList	Genericity sub type list.
 * @return {String[]}	Return split result.
 */
function splitGenericityType(sampleType, subTypeList) {
	var rt = [];
	var i,j;
	if ((typeof(sampleType)!="string") || (sampleType.length<=0)) {
		throw new Error("The `sampleType` can not be empty!");
	}
	var subTypeListCount = subTypeList.length;
	if (subTypeListCount<=0) {
		throw new Error("The `subTypeList.length`("+subTypeListCount+") must >0 !");
	}
	var srcSubType = "";
	var arr = sampleType.split(/[<>]/);
	for(i=0; i<arr.length; ++i) {
		var src = arr[i].trim();
		for(j=0; j<subTypeListCount; ++j) {
			if (src == subTypeList[j]) {
				srcSubType = src;
				break;
			}
		}
		if (srcSubType.length>0) break;
	}
	if (srcSubType.length<=0) {
		// Not found.
		if (arr.length==3) {
			rt = [arr[0]+"<", ">"+arr[2]];
		} else {
			throw new Error("The `sampleType`("+sampleType+") is not genericity type!");
		}
		return rt;
	}
	// Is found.
	var idx = 0;
	var lastText = "";
	for(i=0; i<arr.length; ++i) {
		var idxNext = idx + arr[i].length;
		if (idxNext<sampleType.length) {
			++idxNext; // add '<' or '>'
		}
		var src = arr[i].trim();
		var srcMatch = (src == srcSubType);
		if (srcMatch) {
			var n = sampleType.indexOf(srcSubType, idx);
			lastText += sampleType.substring(idx, n);
			rt.push(lastText);
			lastText = sampleType.substring(n+srcSubType.length, idxNext);
		} else {
			lastText += sampleType.substring(idx, idxNext);
		}
		// next.
		idx = idxNext;
	}
	if (lastText.length>0) {
		rt.push(lastText);
	}
	return rt;
}

function doSubTypesReset() {
	const txtSubTypes = document.getElementById('txtSubTypes');
	txtSubTypes.value = "float,double,sbyte,byte,short,ushort,int,uint,long,ulong";
}

/** 初始化. */
function init() {
	// compatibility.
	if (!window.URL) {
		window.URL = window.webkitURL || window.mozURL || window.msURL;
	}
}
init();

</script>
</body>
</html>